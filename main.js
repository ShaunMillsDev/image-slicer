// Get the input element for the image upload
const input = document.getElementById('imageUpload');
const resizeHandle = document.createElement('div');
const createImageButton = document.getElementById('create-image-button');
let box = document.querySelector('.box');
let editor = document.getElementById('editor');

// for moving box
let isDragging = false;
let startY = 0;
let boxTop = 0;

// for resizing box
let isResizing = false;
let startHeight = 0;
let boxHeight = 0;

resizeHandle.classList.add('resize-handle');
box.appendChild(resizeHandle);

// Listen for changes to the input element
input.addEventListener('change', () => {

  // Get the elements of the page
  const editor = document.getElementById('editor');
  const imageContainer = document.querySelector('.image-container');
  const box = document.querySelector('.box');
  
  // Get the first file from the input element
  const file = input.files[0];

  // Create a new FileReader object
  const reader = new FileReader();

  // Define the onload function for the FileReader object
  reader.onload = () => {
    // Create a new image element
    let img = document.createElement('img');

    // Set the src attribute of the image element to the data URL generated by the FileReader
    img.src = reader.result;

    // Remove any previously uploaded images from the image container
    imageContainer.innerHTML = '';

    // Append the image element to the image container
    imageContainer.appendChild(img);

    img.onload = () => {
      // Set the width and height of the image container and editor to match the uploaded image size
      editor.style.width = `${img.width+10}px`;
      editor.style.height = `${img.height+10}px`;
      imageContainer.style.width = `${img.width}px`;
      imageContainer.style.height = `${img.height}px`;
      box.style.width = `${img.width}px`;
      box.style.top = img.top;
      box.style.left = img.left;
      console.log(img.width, img.height, imageContainer.style.width, imageContainer.style.height)
    }
  };

  // Read the selected file as a data URL
  reader.readAsDataURL(file);
});

box.addEventListener('mousedown', (event) => {
  if (!isResizing) {
    isDragging = true;
    startY = event.clientY;
    boxTop = parseInt(window.getComputedStyle(box).top, 10);
  }
});

// Listen for clicks on the "Create Image" button
createImageButton.addEventListener('click', () => {
  
  // Get the box element and its dimensions
  const boxWidth = box.clientWidth;
  const boxHeight = box.clientHeight;
  
  // Create a new canvas element with the same dimensions as the box
  const canvas = document.createElement('canvas');
  canvas.width = boxWidth;
  canvas.height = boxHeight;

  // Get the image inside the imageContainer
  const originalImage = document.querySelector('.image-container img');

  // Create a new image with the same source as the image inside the imageContainer
  const sourceImage = new Image();
  sourceImage.src = originalImage.src;
  sourceImage.onload = () => {
    // Copy the contents of the box onto the canvas
    const ctx = canvas.getContext('2d');
    const boxPosition = box.getBoundingClientRect();
    const imageContainerPosition = originalImage.getBoundingClientRect();
    const xOffset = boxPosition.x - imageContainerPosition.x;
    const yOffset = boxPosition.y - imageContainerPosition.y;
    ctx.drawImage(sourceImage, xOffset, yOffset, boxWidth, boxHeight, 0, 0, boxWidth, boxHeight);
    
    // Convert the canvas to a data URL representing the image
    const dataURL = canvas.toDataURL();
    
    // Create a new image element with the data URL as the source
    const img = document.createElement('img');
    img.src = dataURL;
    
    // Add the new image element to the page
    const mainContainer = document.getElementById('main-container');
    mainContainer.appendChild(img);
  };
});

resizeHandle.addEventListener('mousedown', (event) => {
  isResizing = true;
  startHeight = event.clientY;
  boxHeight = box.clientHeight;
});

document.addEventListener('mousemove', (event) => {
  if (isDragging) {
    // Calculate the new top position of the box
    const newTop = boxTop + (event.clientY - startY);

    // Get the height of the editor and the box
    const editorHeight = editor.clientHeight-10;
    const boxHeight = box.clientHeight;

    // Constrain the box to stay within the bounds of the editor
    const minTop = 0;
    const maxTop = editorHeight - boxHeight;
    const constrainedTop = Math.max(minTop, Math.min(maxTop, newTop));

    // Update the top position of the box
    box.style.top = `${constrainedTop}px`;
  }

  if (isResizing) {
    // Calculate the new height of the box
    const newHeight = boxHeight + (event.clientY - startHeight);

    // Get the height of the editor
    const editorHeight = editor.clientHeight-10;

    // Constrain the box to stay within the bounds of the editor
    const minHeight = 0;
    const maxHeight = editorHeight - parseInt(window.getComputedStyle(box).top, 10);
    const constrainedHeight = Math.max(minHeight, Math.min(maxHeight, newHeight));

    // Update the height of the box
    box.style.height = `${constrainedHeight}px`;
  }
});

document.addEventListener('mouseup', () => {
  if (isDragging)
    isDragging = false;
  if (isResizing)
    isResizing = false;
});
